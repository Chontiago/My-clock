
* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* Warning: Method invoked with block.
The method + was invoked on time_animation within args.state, but time_animation has
a value of nil.

Here are the details:

object:
{:entity_id=>1, :tick_count=>1, :__thrash_count__=>{}, :time_animation=>#<TimeAnimation:0x7fd643acd600>}

member: [+]
attribute: [time_animation].

Set a default value for this property or you might get an exception later on.


* WARNING: TimeAnimation::Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Borders does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Borders
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [TimeAnimation::Borders] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<TimeAnimation::Borders:0x7fadd4b46630>

* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Borders does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Borders
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Borders does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Borders
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* Warning: Method invoked with block.
The method + was invoked on time_animation within args.state, but time_animation has
a value of nil.

Here are the details:

object:
{:entity_id=>3, :tick_count=>0, :__thrash_count__=>{}, :time_animation=>#<TimeAnimation:0x7f90442424a0>}

member: [+]
attribute: [time_animation].

Set a default value for this property or you might get an exception later on.


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* Warning: Method invoked with block.
The method + was invoked on time_animation within args.state, but time_animation has
a value of nil.

Here are the details:

object:
{:entity_id=>3, :tick_count=>0, :__thrash_count__=>{}, :time_animation=>#<TimeAnimation:0x7fa5432424a0>}

member: [+]
attribute: [time_animation].

Set a default value for this property or you might get an exception later on.


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [TimeAnimation::Borders] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<TimeAnimation::Borders:0x7fd777cba350>

* WARNING: TimeAnimation::Borders does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Borders
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: [:"TimeAnimation::Borders"]]


* WARNING: TimeAnimation::Borders does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Borders
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [TimeAnimation::Borders] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<TimeAnimation::Borders:0x7fb18f93b240>

* WARNING: TimeAnimation::Borders does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Borders
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: [:"TimeAnimation::Borders"]]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Borders does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Borders
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Bounce does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Bounce
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Borders does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Borders
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Borders does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Borders
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Borders does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Borders
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* Warning: Method invoked with block.
The method - was invoked on time_animation within args.state, but time_animation has
a value of nil.

Here are the details:

object:
{:entity_id=>3, :tick_count=>0, :__thrash_count__=>{}, :time_animation=>#<TimeAnimation:0x7f78362424a0>}

member: [-]
attribute: [time_animation].

Set a default value for this property or you might get an exception later on.


* WARNING: TimeAnimation::Borders does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Borders
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* Warning: Method invoked with block.
The method + was invoked on time_animation within args.state, but time_animation has
a value of nil.

Here are the details:

object:
{:entity_id=>3, :tick_count=>0, :__thrash_count__=>{}, :time_animation=>#<TimeAnimation:0x7fb4c72424a0>}

member: [+]
attribute: [time_animation].

Set a default value for this property or you might get an exception later on.


* WARNING: TimeAnimation::Borders does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Borders
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Borders does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Borders
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* Warning: Method invoked with block.
The method + was invoked on time_animation within args.state, but time_animation has
a value of nil.

Here are the details:

object:
{:entity_id=>3, :tick_count=>0, :__thrash_count__=>{}, :time_animation=>#<TimeAnimation:0x7f9cb1a41a20>}

member: [+]
attribute: [time_animation].

Set a default value for this property or you might get an exception later on.


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* Warning: Method invoked with block.
The method + was invoked on time_animation within args.state, but time_animation has
a value of nil.

Here are the details:

object:
{:entity_id=>3, :tick_count=>0, :__thrash_count__=>{}, :time_animation=>#<TimeAnimation:0x7fca593424a0>}

member: [+]
attribute: [time_animation].

Set a default value for this property or you might get an exception later on.


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Slide does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Slide
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Slide does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Slide
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Slide does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Slide
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Borders does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Borders
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* Warning: Method invoked with block.
The method each was invoked on time_animation within args.state, but time_animation has
a value of nil.

Here are the details:

object:
{:entity_id=>3, :tick_count=>0, :__thrash_count__=>{}, :time_animation=>#<TimeAnimation:0x7fe2eb941a20>}

member: [each]
attribute: [time_animation].

Set a default value for this property or you might get an exception later on.


* WARNING: TimeAnimation::Slide does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Slide
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Slide does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Slide
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation::Borders does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Borders
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Slide does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Slide
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* Warning: Method invoked with block.
The method + was invoked on time_animation within args.state, but time_animation has
a value of nil.

Here are the details:

object:
{:entity_id=>3, :tick_count=>1, :__thrash_count__=>{}, :time_animation=>#<TimeAnimation:0x7fba32c9d200>}

member: [+]
attribute: [time_animation].

Set a default value for this property or you might get an exception later on.


* WARNING: TimeAnimation::Expand does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation::Expand
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, color: color }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, color: color }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* Warning: Method invoked with block.
The method + was invoked on time_animation within args.state, but time_animation has
a value of nil.

Here are the details:

object:
{:entity_id=>3, :tick_count=>0, :__thrash_count__=>{}, :time_animation=>#<TimeAnimation:0x7f7d8b141a20>}

member: [+]
attribute: [time_animation].

Set a default value for this property or you might get an exception later on.


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* Warning: Method invoked with block.
The method + was invoked on time_animation within args.state, but time_animation has
a value of nil.

Here are the details:

object:
{:entity_id=>3, :tick_count=>0, :__thrash_count__=>{}, :time_animation=>#<TimeAnimation:0x7fca1cb41a20>}

member: [+]
attribute: [time_animation].

Set a default value for this property or you might get an exception later on.

* Warning: Method invoked with block.
The method + was invoked on time_animation within args.state, but time_animation has
a value of nil.

Here are the details:

object:
{:entity_id=>1, :tick_count=>0, :__thrash_count__=>{}, :time_animation=>#<TimeAnimation:0x7fca1cbc9910>}

member: [+]
attribute: [time_animation].

Set a default value for this property or you might get an exception later on.

* Warning: Method invoked with block.
The method + was invoked on time_animation within args.state, but time_animation has
a value of nil.

Here are the details:

object:
{:entity_id=>1, :tick_count=>0, :__thrash_count__=>{}, :time_animation=>#<TimeAnimation:0x7fca1cbc98e0>}

member: [+]
attribute: [time_animation].

Set a default value for this property or you might get an exception later on.


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* Warning: Method invoked with block.
The method each_with_index was invoked on time_animation within args.state, but time_animation has
a value of nil.

Here are the details:

object:
{:entity_id=>1, :tick_count=>0, :__thrash_count__=>{}, :time_animation=>#<TimeAnimation:0x7fe0d99c78d0>}

member: [each_with_index]
attribute: [time_animation].

Set a default value for this property or you might get an exception later on.


* WARNING: ColorChange does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class ColorChange
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: ColorChange does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class ColorChange
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Clock] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Clock:0x7fbb559418a0>

* WARNING: Bounce does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Bounce
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Bounce does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Bounce
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Clock] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Clock:0x7f879d2c12d0>

* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* Warning: Method invoked with block.
The method each was invoked on time_animation within args.state, but time_animation has
a value of nil.

Here are the details:

object:
{:entity_id=>3, :tick_count=>0, :__thrash_count__=>{}, :time_animation=>#<TimeAnimation:0x7feeaaa41a20>}

member: [each]
attribute: [time_animation].

Set a default value for this property or you might get an exception later on.


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Text does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Text
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Text] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Text:0x7f803fa39f50>

* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Text does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Text
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Text does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Text
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Text does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Text
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Text does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Text
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Text does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Text
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Text does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Text
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, width: width, height: height }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Text does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Text
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, width: width, height: height }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Text] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Text:0x7fdb779c1ae0>

* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Text] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Text:0x7f943913a010>

* WARNING: Text does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Text
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, width: width, height: height }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Text does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Text
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, width: width, height: height, text: text }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Enumerator] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Enumerator:0x7fcb982c2020>

* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Text does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Text
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, width: width, height: height, text: text }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Text does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Text
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, width: width, height: height, text: text }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Bounce] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Bounce:0x7fae27a99c30>

* WARNING: Bounce does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Bounce
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Slide] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Slide:0x7fae27a99ae0>
* INFO: The .to_s function for type [Expand] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Expand:0x7fae27a99630>
* INFO: The .to_s function for type [ColorChange] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<ColorChange:0x7fae27a99570>

* WARNING: Bounce does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Bounce
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [ColorChange] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<ColorChange:0x7f85d833aeb0>

* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Text does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Text
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, width: width, height: height, text: text }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Text does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Text
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, width: width, height: height, text: text }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Slide does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Slide
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Slide does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Slide
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Slide does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Slide
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* Warning: Method invoked with block.
The method each_pair was invoked on time_animation within args.state, but time_animation has
a value of nil.

Here are the details:

object:
{:entity_id=>1, :tick_count=>1, :__thrash_count__=>{}, :time_animation=>#<TimeAnimation:0x7fcad8cc6e80>}

member: [each_pair]
attribute: [time_animation].

Set a default value for this property or you might get an exception later on.


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Clock] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Clock:0x7f893543e5a0>

* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: [:Clock]]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Clock] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Clock:0x7f99ee33e5a0>

* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: [:Clock]]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Clock] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Clock:0x7fb5b493e5a0>

* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: [:Clock]]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Clock] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Clock:0x7fd47733e5a0>

* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: [:Clock]]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Clock] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Clock:0x7ff71e33e5a0>

* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: [:Clock]]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Clock] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Clock:0x7fd1ca93e5a0>

* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: [:Clock]]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: AnimationSelect does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class AnimationSelect
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { reset: reset }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: AnimationSelect does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class AnimationSelect
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { reset: reset }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Slide does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Slide
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Slide does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Slide
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Clock] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Clock:0x7f8c16a41720>
* INFO: The .to_s function for type [Clock] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Clock:0x7fddd12418a0>

* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Clock] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Clock:0x7fd4a29418a0>
* INFO: The .to_s function for type [Clock] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Clock:0x7fe2d49418a0>

* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Clock] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Clock:0x7fb372c418a0>

* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: [:Clock]]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Clock] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Clock:0x7fe9c62418a0>

* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: [:Clock]]


* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Clock] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Clock:0x7fe6a32418a0>

* WARNING: Clock does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class Clock
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { x_pos: x_pos, y_pos: y_pos, horizontal_speed: horizontal_speed, vertical_speed: vertical_speed, width: width, height: height, size: size, red: red, green: green, blue: blue, color: color, time: time }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: [:Clock]]


* WARNING: TimeAnimation does not support serialization. Returning nil.
Please override the :serialize method and return a hash so that
Class can be persisted to disk in the event of an exception.
Here is an example of what you need to do:
#+begin_src ruby
class TimeAnimation
  # 1. Create a serialize method that returns a hash with all of
  #    the values you care about.
  def serialize
    { }
  end

  # 2. Override the inspect method and return ~serialize.to_s~.
  def inspect
    serialize.to_s
  end

  # 3. Override to_s and return ~serialize.to_s~.
  def to_s
    serialize.to_s
  end
end
#+end_src

[Message ID: []]

* INFO: The .to_s function for type [Clock] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Clock:0x7f97982418a0>
* INFO: The .to_s function for type [Clock] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Clock:0x7fa0cb141720>
* INFO: The .to_s function for type [Clock] probably doesn't look too helpful. Trying calling the .help function or .docs function. #<Clock:0x7f7b399418a0>
